.              匹配任意单个字符
|              逻辑或
[]             匹配字符集中的任意一个字符
[^]            对字符集集合取非
-              定义一个区间,例[A-Z]
\              对下一个字符转义

*              匹配前一个字符(或子表达式)的零次或多次重复
*?             *的懒惰型版本
+                                          一次或多次
+?             +的懒惰型版本
?                                          零次或一次
{n}                                        n次
{m,n}                                      至少m次,最多n次
{n, }                                      n次或更多
{n, }?         {n}的懒惰型版本

^              匹配字符串开头
\A             匹配字符串开头
$              匹配字符串结束
\Z             匹配字符串结束
\<             匹配单词开头
\>             匹配单词结束
\b             匹配单词(由连续的字母、数字、下划线组成)边界(开始或结束),该位置在\w和\W之间
\B             \b的反义

[\b]           退格字符
\c             匹配一个控制字符Ctrl
\d             匹配任意数字字符
\D             \d的反义
\f             换页符
\n             换行符
\r             回车符
\s             匹配一个空白字符
\S             \s的反义
\t             制表符
\v             垂直制表符
\w             匹配任意一个字母、数字或下划线字符
\W             \w的转义
\x             匹配一个十六进制数
\0             匹配一个八进制数

()             定义一个子表达式
\n             匹配第n个子表达式
?=             向前查找(包含了一个必须匹配，但不在结果中返回的模式)
?<=            向后查找
?!             负向前查找
?!=            负向后查找
?()            条件(if then)
?()|           条件(if then else)

\E             结束\L或\U转义
\l             把下一个字符转换为小写
\L             把后面的字符转换为小写,直到遇到\E为止
\u             把下一个字符转换为大写
\U                               大           \E

(?m)           分行匹配模式,使得正则表达式引擎把行分隔符当做一个字符串分隔符来对待



举例:
\b[Cc][Aa][Rr]\b          匹配单词Ｃar(不区分大小写)
<[Hh]1>.*</[Hh]1>         匹配<H1>标签，因为用的是贪婪模式，所以有点小问题
<[hH]([1-6])>.*?</[hH]\1> 应用了前面的子匹配的子表达式，OK
<[Bb]>.*?</[Bb]>          匹配<B>标签及其内文本
.*\.cpp                   匹配所有c++文件
[Tt]mp[0-4]\.cpp
[Tt]mp[^\d]\.cpp
myArray\[[0-9]\]          匹配数组0-9
[\r]?\n\r?\n              回车+换行,用于匹配空白行
\w+[\w.]*@[\w.]+\.\w+     匹配电子邮箱地址
https?://[\w./]+          匹配URL地址
#[0-9A-Fa-f]{6}           选取十六进制颜色
\B-\B                     匹配一个前后都不是单词边界的连字符
^\s*<\?xml.*\?>           匹配字符串开头的＜?xml .... ?> 标签
(?m)^\s*//.*$             开启分行模式，匹配所有//注释
($nbsp;){2,}
(\d{1,3}\.){3}\d{1,3}     匹配IP地址
(((\d{1,2})|(1\d{2})|(2[0-4]\d)|(25[0-5]))\.){3}(((\d{1,2})|(1\d{2})|(2[0-4]\d)|(25[0-5]))\.)  还是IP地址
[ ]+(\w+)[ ]+\1           匹配连续出现两次的单词,这里\1引用的时 (\w+)子表达式 
.+(?=:)                   向前查找，对于＂HTTP://www..."的文本，只匹配出HTTP
(?<=\$)[\d.]+             向后查找，对于"$23.45",只返回数值部分
(?<=<[tT][iI][tT][lL][eE]>).*(?=</[tT][iI][tT][lL][eE]>)   只返回Title标签内的文字部分
(?<!=\$)[\d.]+            负向后匹配，匹配在数值前无$符的数值
(<[Aa]\s+[^>]+>\s*)?<[Ii][Mm][Gg]\s+[^>]+>(?(1)\s*</[Aa]>)  回溯引用条件:若存在<Ａ>标签，则匹配</A>标签
(\()?\d{3}(?(1)\)|-)\d{3}-\d{4}    该正则用于匹配下面两种情况: 1.(123)456-7890  2.123-456-7890
\d{5}(?(?=-)-\d{4})        \d{5}不解释，后半部分:?=-前向匹配来匹配一个连字符(但不消费)，如果条件成立，－\d{4}将匹配那个连字符和随后的４个数字．　（这里不会匹配＂3333-"这种情况)

(下面两句是个整体)
(\w+[\w\.]*@[\w\.]+\.\w+)  用于构造子表达式
<A HREF="mailto:$1">$1</A>　对构造的子表达式用于替换
(<Hh1>(.*?)</[Hh]1>)
$1\U$2\E$3                 把H1标签内的字母转换成大写
